// SPDX-License-Identifier: Apache-2.0
// !! THIS FILE WAS AUTOGENERATED BY abi-to-sol v0.5.0. SEE SOURCE BELOW. !!
pragma solidity >=0.5.0;

interface Judge {
    function calcIOHash(bytes32[10] calldata roots)
        external
        pure
        returns (bytes32);

    function calcStateHash(
        bytes32[10] calldata roots,
        uint256[4] calldata pointers
    ) external returns (bytes32);

    function checkFileProof(
        bytes32 state,
        bytes32[10] calldata roots,
        uint256[4] calldata pointers,
        bytes32[] calldata _proof,
        uint256 loc
    ) external returns (bool);

    function checkProof(
        bytes32 hash,
        bytes32 root,
        bytes32[] calldata _proof,
        uint256 loc
    ) external returns (bool);

    function debug_judge(
        bytes32[13] calldata res,
        uint256 q,
        bytes32[] calldata _proof,
        bytes32[] calldata _proof2,
        bytes32 vm_,
        bytes32 op,
        uint256[4] calldata regs,
        bytes32[10] calldata roots,
        uint256[4] calldata pointers
    )
        external
        returns (
            uint256,
            bytes32,
            bytes32,
            uint256
        );

    function initialize() external;

    function judge(
        bytes32[13] calldata res,
        uint256 q,
        bytes32[] calldata _proof,
        bytes32[] calldata _proof2,
        bytes32 vm_,
        bytes32 op,
        uint256[4] calldata regs,
        bytes32[10] calldata roots,
        uint256[4] calldata pointers
    ) external returns (uint256);

    function judgeCustom(
        bytes32 start,
        bytes32 next,
        bytes32 ex_state,
        uint256 ex_size,
        bytes32 op,
        uint256[4] calldata regs,
        bytes32[10] calldata roots,
        uint256[4] calldata pointers,
        bytes32[] calldata _proof
    ) external;
}

// THIS FILE WAS AUTOGENERATED FROM THE FOLLOWING ABI JSON:
/*
[{"inputs":[{"internalType":"bytes32[10]","name":"roots","type":"bytes32[10]"}],"name":"calcIOHash","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"pure","type":"function"},{"inputs":[{"internalType":"bytes32[10]","name":"roots","type":"bytes32[10]"},{"internalType":"uint256[4]","name":"pointers","type":"uint256[4]"}],"name":"calcStateHash","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"state","type":"bytes32"},{"internalType":"bytes32[10]","name":"roots","type":"bytes32[10]"},{"internalType":"uint256[4]","name":"pointers","type":"uint256[4]"},{"internalType":"bytes32[]","name":"_proof","type":"bytes32[]"},{"internalType":"uint256","name":"loc","type":"uint256"}],"name":"checkFileProof","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"hash","type":"bytes32"},{"internalType":"bytes32","name":"root","type":"bytes32"},{"internalType":"bytes32[]","name":"_proof","type":"bytes32[]"},{"internalType":"uint256","name":"loc","type":"uint256"}],"name":"checkProof","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32[13]","name":"res","type":"bytes32[13]"},{"internalType":"uint256","name":"q","type":"uint256"},{"internalType":"bytes32[]","name":"_proof","type":"bytes32[]"},{"internalType":"bytes32[]","name":"_proof2","type":"bytes32[]"},{"internalType":"bytes32","name":"vm_","type":"bytes32"},{"internalType":"bytes32","name":"op","type":"bytes32"},{"internalType":"uint256[4]","name":"regs","type":"uint256[4]"},{"internalType":"bytes32[10]","name":"roots","type":"bytes32[10]"},{"internalType":"uint256[4]","name":"pointers","type":"uint256[4]"}],"name":"debug_judge","outputs":[{"internalType":"uint256","name":"","type":"uint256"},{"internalType":"bytes32","name":"","type":"bytes32"},{"internalType":"bytes32","name":"","type":"bytes32"},{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"initialize","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32[13]","name":"res","type":"bytes32[13]"},{"internalType":"uint256","name":"q","type":"uint256"},{"internalType":"bytes32[]","name":"_proof","type":"bytes32[]"},{"internalType":"bytes32[]","name":"_proof2","type":"bytes32[]"},{"internalType":"bytes32","name":"vm_","type":"bytes32"},{"internalType":"bytes32","name":"op","type":"bytes32"},{"internalType":"uint256[4]","name":"regs","type":"uint256[4]"},{"internalType":"bytes32[10]","name":"roots","type":"bytes32[10]"},{"internalType":"uint256[4]","name":"pointers","type":"uint256[4]"}],"name":"judge","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"start","type":"bytes32"},{"internalType":"bytes32","name":"next","type":"bytes32"},{"internalType":"bytes32","name":"ex_state","type":"bytes32"},{"internalType":"uint256","name":"ex_size","type":"uint256"},{"internalType":"bytes32","name":"op","type":"bytes32"},{"internalType":"uint256[4]","name":"regs","type":"uint256[4]"},{"internalType":"bytes32[10]","name":"roots","type":"bytes32[10]"},{"internalType":"uint256[4]","name":"pointers","type":"uint256[4]"},{"internalType":"bytes32[]","name":"_proof","type":"bytes32[]"}],"name":"judgeCustom","outputs":[],"stateMutability":"nonpayable","type":"function"}]
*/
